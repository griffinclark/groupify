enum Sender {
  USER
  NOTIFICATIONPANEL
}

type NotificationFromTo
  @model
  @auth(rules: [{ allow: private }])
  @key(name: "byNotification", fields: ["notificationID"])
  @key(name: "bySender", fields: ["senderID"])
  @key(name: "byRecipient", fields: ["recipientID"]) {
  id: ID!
  senderType: Sender
  notificationID: ID!
  senderID: ID
  recipientID: ID!
  notification: Notification! @connection(fields: ["notificationID"])
  sender: User @connection(fields: ["senderID"])
  recipient: User! @connection(fields: ["recipientID"])
}

type Notification @model @auth(rules: [{ allow: private }]) {
  id: ID!
  body: String!
  data: String
  ttl: Int
  messageSubtitle: String
  sound: Boolean
  channel: String
  recipients: [NotificationFromTo] @connection(keyName: "byNotification", fields: ["id"])
}

type Plan @model {
  id: ID!
  title: String!
  description: String
  location: String
  placeID: String
  date: AWSDate
  time: AWSTime
  creatorID: ID!
  creator: User @connection(fields: ["creatorID"])
  invitees: [PlanArbitration] @connection(keyName: "byPlanID", fields: ["id"])
}

type PlanArbitration
  @model
  @key(name: "byPlanID", fields: ["planID"])
  @key(name: "byInviteeID", fields: ["inviteeID"]) {
  id: ID!
  stat: Status
  planID: ID!
  newPlanID: ID
  inviteeID: ID
  invitee: User! @connection(fields: ["inviteeID"])
  plan: Plan! @connection(fields: ["planID"])
  newPlan: Plan! @connection(fields: ["newPlanID"])
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

type Availability @model {
  id: ID!
  Sunday: [AWSTime]
  Monday: [AWSTime]
  Tuesday: [AWSTime]
  Wednesday: [AWSTime]
  Thursday: [AWSTime]
  Friday: [AWSTime]
  Saturday: [AWSTime]
}

type User
  @model
  @key(name: "byPhoneNumber", fields: ["phoneNumber"], queryField: "usersByPhoneNumber")
  @key(name: "byName", fields: ["name"], queryField: "usersByName") {
  id: ID!
  phoneNumber: AWSPhone!
  name: String
  pushToken: String
  email: String
  availability: Availability @connection
  notificationsSent: [NotificationFromTo] @connection(keyName: "bySender", fields: ["id"])
  notificationsRecieved: [NotificationFromTo] @connection(keyName: "byRecipient", fields: ["id"])
  friends: [UserRelationship] @connection(keyName: "bySource", fields: ["id"])
  plans: [PlanArbitration] @connection(keyName: "byInviteeID", fields: ["id"])
}

type UserRelationship @model @auth(rules: [{ allow: private }]) @key(name: "bySource", fields: ["friendSourceID"]) {
  id: ID!
  relationshipStatus: RelationshipStatus!
  friendSourceID: ID!
  friendID: ID!
  friendSource: User! @connection(fields: ["friendSourceID"])
  friend: User! @connection(fields: ["friendID"])
}

enum RelationshipStatus {
  PENDING
  FRIENDS
  BLOCKED
}
